class Solution:
    # @param A : tuple of integers
    # @param B : integer
    # @return an integer
    def diffPossible(self, A, B):
        d = {}
        flag = 0
        for i in A:
            if i in d:
                flag = 1
            else:
                d[i] = i
                
        if B == 0 and flag == 1:
            return 1
            
        for i in A:
            v = i + B
            if v == i:
                return 0
            if v in d:
                return 1
        
        return 0


class Solution:
    # @param A : tuple of strings
    # @return a list of list of integers
    def anagrams(self, A):
        d = defaultdict(list)
        out = []
        for i in range(len(A)):
            key = ''.join(sorted(A[i]))
            d[key].append(i+1)
            
        for key,values in d.iteritems():
            out.append(values)
            
        return out

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
ListNode* Solution::mergeTwoLists(ListNode* A, ListNode* B) {
        ListNode* curr = NULL;
        ListNode* head = NULL;
        ListNode *newNode = NULL;
        
        while(A && B) {
            if(A->val < B->val) {
                newNode = new ListNode(A->val);
                A = A->next;  
            }
            else {
                newNode = new ListNode(B->val);
                B = B->next;
            }
            if(head == NULL) {
                head = newNode;
                curr = newNode;
            }else {
                curr->next = newNode;
                curr = curr->next;
            }
        }
        
        while(A) {
            newNode = new ListNode(A->val);

            if(head == NULL) {
                head = newNode;
                curr = newNode;
            }else {
                curr->next = newNode;
                curr = curr->next;
            }
            A = A->next;
        }
        while(B) {
            newNode = new ListNode(B->val);

            if(head == NULL) {
                head = newNode;
                curr = newNode;
            }else {
                curr->next = newNode;
                curr = curr->next;
            }
            B = B->next;
        }
        return head;
}


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    # @param A : head node of linked list
    # @return the first node in the cycle in the linked list
    
    def findCycle(self, A):
        t = A
        h = A
        
        while h is not None and h.next is not None:
            t = t.next
            h = h.next.next
            if t == h:
                return t       
    
    def detectCycle(self, A):
        if A is None:
            return None
            
        i = self.findCycle(A)
        
        if i is None:
            return None
        
        c = A
        while c != i:
            c = c.next
            i = i.next
        
        return i



